{"version":3,"sources":["assets/js/tabs.ts","assets/js/index.ts"],"names":[],"mappings":"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","file":"js.34864837.js","sourceRoot":"..","sourcesContent":["/*\n *  This is a simplified variant of the w3 accessible tabs:\n *  https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-1/tabs.html\n *\n */\n\nclass Tabs {\n  domNode: HTMLElement;\n  tablist: Element;\n  tabs: NodeListOf<HTMLElement & { index: number }>;\n  panels: NodeListOf<HTMLElement>;\n  keys: {\n    end: number;\n    home: number;\n    left: number;\n    right: number;\n    enter: number;\n    space: number;\n  };\n  direction: {\n    37: number;\n    38: number;\n    39: number;\n    40: number;\n  };\n\n  constructor(domNode: HTMLElement) {\n    this.tablist = domNode.querySelectorAll('[role=\"tablist\"]')[0];\n    this.domNode = domNode;\n\n    this.keys = {\n      end: 35,\n      home: 36,\n      left: 37,\n      right: 39,\n      enter: 13,\n      space: 32\n    };\n\n    this.direction = {\n      37: -1,\n      38: -1,\n      39: 1,\n      40: 1\n    };\n    this.generateArrays();\n  }\n\n  init(activated?: number) {\n    for (let i = 0; i < this.tabs.length; i += 1) {\n      this.addListeners(i);\n      if (activated !== undefined && activated < this.tabs.length) {\n        this.activateTab(this.tabs[activated], false);\n      }\n    }\n  }\n\n  generateArrays() {\n    this.tabs = this.domNode.querySelectorAll('[role=\"tab\"]');\n    this.panels = this.domNode.querySelectorAll('[role=\"tabpanel\"]');\n  }\n\n  addListeners(index: number) {\n    this.tabs[index].addEventListener(\n      \"click\",\n      this.clickEventListener.bind(this)\n    );\n    this.tabs[index].addEventListener(\n      \"keydown\",\n      this.keydownEventListener.bind(this)\n    );\n    this.tabs[index].addEventListener(\n      \"keyup\",\n      this.keyupEventListener.bind(this)\n    );\n\n    // Build an array with all this.tabs (<button>s) in it\n    this.tabs[index].index = index;\n  }\n\n  clickEventListener(event) {\n    const tab = event.target;\n    this.activateTab(tab, false);\n  }\n\n  keydownEventListener(event: KeyboardEvent) {\n    const key = event.keyCode;\n\n    switch (key) {\n      case this.keys.end:\n        event.preventDefault();\n        // Activate last tab\n        this.focusLastTab();\n        break;\n      case this.keys.home:\n        event.preventDefault();\n        // Activate first tab\n        this.focusFirstTab();\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  keyupEventListener(event) {\n    const key = event.keyCode;\n\n    switch (key) {\n      case this.keys.left:\n      case this.keys.right:\n        this.switchTabOnArrowPress(event);\n        break;\n      case this.keys.enter:\n      case this.keys.space:\n        this.activateTab(event.target, true);\n        break;\n      default:\n        break;\n    }\n  }\n\n  switchTabOnArrowPress(event: KeyboardEvent) {\n    const pressed = event.keyCode;\n\n    if (this.direction[pressed]) {\n      const target = event.target as HTMLElement & { index: number };\n      if (target.index !== undefined) {\n        if (this.tabs[target.index + this.direction[pressed]]) {\n          this.tabs[target.index + this.direction[pressed]].focus();\n        } else if (pressed === this.keys.left) {\n          this.focusLastTab();\n        } else if (pressed === this.keys.right) {\n          this.focusFirstTab();\n        }\n      }\n    }\n  }\n\n  activateTab(tab: HTMLElement, setFocus: boolean) {\n    // Deactivate all other tabs\n    this.deactivateTabs();\n\n    // Remove tabindex attribute\n    tab.removeAttribute(\"tabindex\");\n\n    // Set the tab as selected\n    tab.setAttribute(\"aria-selected\", \"true\");\n\n    // Get the value of aria-controls (which is an ID)\n    const controls = tab.getAttribute(\"aria-controls\");\n\n    // Remove hidden attribute from tab panel to make it visible\n    document.getElementById(controls).removeAttribute(\"hidden\");\n\n    // Set focus when required\n    if (setFocus) {\n      tab.focus();\n    }\n  }\n\n  deactivateTabs() {\n    for (let t = 0; t < this.tabs.length; t += 1) {\n      this.tabs[t].setAttribute(\"tabindex\", \"-1\");\n      this.tabs[t].setAttribute(\"aria-selected\", \"false\");\n    }\n\n    for (let p = 0; p < this.panels.length; p += 1) {\n      this.panels[p].setAttribute(\"hidden\", \"hidden\");\n    }\n  }\n\n  focusFirstTab() {\n    this.tabs[0].focus();\n  }\n\n  // Make a guess\n  focusLastTab() {\n    this.tabs[this.tabs.length - 1].focus();\n  }\n}\n\nexport default Tabs;\n","import Tabs from \"./tabs\";\n\nconst getRandomInt = (max: number) => {\n  return Math.floor(Math.random() * Math.floor(max));\n};\n\n[].forEach.call(document.getElementsByClassName(\"tabs\"), (el: HTMLElement) => {\n  const tabs = new Tabs(el);\n  const max = el.querySelectorAll('[role=\"tab\"]').length;\n  const randomInt = getRandomInt(max);\n  tabs.init(randomInt);\n});\n"]}